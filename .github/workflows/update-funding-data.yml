name: Update Funding Data

# Run daily at 6 AM UTC (7 AM BST / 6 AM GMT)
on:
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:  # Allow manual triggering
  push:
    branches: [ main ]
    paths:
      - 'scrapers/**'
      - '.github/workflows/**'

jobs:
  update-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up Chrome for Selenium
      uses: browser-actions/setup-chrome@latest
    
    - name: Install ChromeDriver
      uses: nanasess/setup-chromedriver@master
    
    - name: Create logs directory
      run: mkdir -p logs
    
    - name: Run funding data update
      run: |
        cd scrapers
        python update_all.py --verbose
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Check for data changes
      id: check_changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if there are any changes
        if git diff --quiet && git diff --staged --quiet; then
          echo "No changes detected"
          echo "changes=false" >> $GITHUB_OUTPUT
        else
          echo "Changes detected"
          echo "changes=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit and push changes
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        git add data/ || true
        git add logs/ || true
        
        # Create commit message with timestamp and summary
        TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
        COMMIT_MSG="Auto-update funding data - $TIMESTAMP"
        
        # Add summary if available
        if [ -f "data/update_summary.json" ]; then
          TOTAL_OPPORTUNITIES=$(python -c "import json; data=json.load(open('data/update_summary.json')); print(data.get('total_opportunities', 0))")
          COMMIT_MSG="$COMMIT_MSG\n\nTotal opportunities: $TOTAL_OPPORTUNITIES"
        fi
        
        git commit -m "$COMMIT_MSG" || exit 0
        git push
    
    - name: Upload logs as artifact
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: scraping-logs
        path: logs/
        retention-days: 7
    
    - name: Create issue on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const title = `Funding data update failed - ${new Date().toISOString().split('T')[0]}`;
          const body = `The automated funding data update failed.
          
          **Workflow run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          **Timestamp:** ${new Date().toISOString()}
          
          Please check the logs and fix any issues with the scrapers.`;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['bug', 'automation']
          });

  deploy:
    needs: update-data
    runs-on: ubuntu-latest
    if: always()  # Run even if update-data fails, to deploy existing data
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: main  # Ensure we get the latest changes
    
    - name: Setup Pages
      uses: actions/configure-pages@v3
    
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v2
      with:
        path: '.'
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

# Required for GitHub Pages deployment
permissions:
  contents: write
  pages: write
  id-token: write
  issues: write